// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WarhammerProfessionApp.Entities;

namespace WarhammerProfessionApp.Migrations
{
    [DbContext(typeof(ProfessionsContext))]
    [Migration("20200501211638_InitialSchemaMigration")]
    partial class InitialSchemaMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.Ability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DictionaryId")
                        .HasColumnType("int");

                    b.Property<bool>("HasImpactOnStatictics")
                        .HasColumnType("bit");

                    b.Property<int?>("ImpactValue")
                        .HasColumnType("int");

                    b.Property<bool>("IsStartingValue")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte?>("Type")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("ValueToAlter")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("DictionaryId");

                    b.ToTable("Abilities");
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.AdditionalCharacterItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("AdditionalCharacterItem");
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.AdditionalCharacterValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("AdditionalCharacterValue");
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CurrentProfessionId")
                        .HasColumnType("int");

                    b.Property<int>("ExperienceSummary")
                        .HasColumnType("int");

                    b.Property<int>("ExperienceUsed")
                        .HasColumnType("int");

                    b.Property<int>("Money")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Race")
                        .HasColumnType("tinyint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrentProfessionId");

                    b.HasIndex("UserId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.CharacterAbility", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("AbilityId")
                        .HasColumnType("int");

                    b.Property<int?>("DictionaryValueId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdditionalValue")
                        .HasColumnType("bit");

                    b.Property<int?>("ProfessionAbilitiesId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "AbilityId");

                    b.HasIndex("AbilityId");

                    b.HasIndex("DictionaryValueId");

                    b.HasIndex("ProfessionAbilitiesId");

                    b.ToTable("CharacterAbility");
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.CharacterItem", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("CharacterItem");
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.CharacterProfession", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("int");

                    b.Property<byte>("Order")
                        .HasColumnType("tinyint");

                    b.HasKey("CharacterId", "ProfessionId");

                    b.HasIndex("ProfessionId");

                    b.ToTable("CharacterProfession");
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.CharacterSkill", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int?>("DictionaryValueId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdditionalValue")
                        .HasColumnType("bit");

                    b.Property<int?>("ProfessionSkillsId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "SkillId");

                    b.HasIndex("DictionaryValueId");

                    b.HasIndex("ProfessionSkillsId");

                    b.HasIndex("SkillId");

                    b.ToTable("CharacterSkill");
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.CharacterStatistic", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<short>("StatisticId")
                        .HasColumnType("smallint");

                    b.Property<int>("BaseValue")
                        .HasColumnType("int");

                    b.Property<int>("CurrentValue")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "StatisticId");

                    b.HasIndex("StatisticId");

                    b.ToTable("CharacterStatistic");
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.DictionaryDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanBeDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Dictionaries");
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.DictionaryValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanBeDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("DefinitionId")
                        .HasColumnType("int");

                    b.Property<byte?>("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DefinitionId");

                    b.ToTable("DictionaryValues");
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.DictionaryValueProfessionAbility", b =>
                {
                    b.Property<int>("DictionaryValueId")
                        .HasColumnType("int");

                    b.Property<int>("ProfessionAbilityId")
                        .HasColumnType("int");

                    b.HasKey("DictionaryValueId", "ProfessionAbilityId");

                    b.HasIndex("ProfessionAbilityId");

                    b.ToTable("DictionaryValueProfessionAbility");
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.DictionaryValueProfessionSkill", b =>
                {
                    b.Property<int>("DictionaryValueId")
                        .HasColumnType("int");

                    b.Property<int>("ProfessionSkillId")
                        .HasColumnType("int");

                    b.HasKey("DictionaryValueId", "ProfessionSkillId");

                    b.HasIndex("ProfessionSkillId");

                    b.ToTable("DictionaryValueProfessionSkill");
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("ItemType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<byte>("Rarity")
                        .HasColumnType("tinyint");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.ManyToMany.ProfessionAbilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProfessionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionId");

                    b.ToTable("ProfessionAbilities");
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.ManyToMany.ProfessionAbility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AbilityId")
                        .HasColumnType("int");

                    b.Property<bool?>("AllowAllValues")
                        .HasColumnType("bit");

                    b.Property<int>("ProfessionAbilitiesId")
                        .HasColumnType("int");

                    b.Property<int?>("ProfessionAbilitiesId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.HasIndex("ProfessionAbilitiesId");

                    b.HasIndex("ProfessionAbilitiesId1");

                    b.ToTable("ProfessionAbility");
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.ManyToMany.ProfessionItem", b =>
                {
                    b.Property<int>("ProfessionsItemId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProfessionsItemId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("ProfessionItem");
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.ManyToMany.ProfessionItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProfessionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionId");

                    b.ToTable("ProfessionItems");
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.ManyToMany.ProfessionProfession", b =>
                {
                    b.Property<int>("EntranceProfessionId")
                        .HasColumnType("int");

                    b.Property<int>("OutputProfessionId")
                        .HasColumnType("int");

                    b.HasKey("EntranceProfessionId", "OutputProfessionId");

                    b.HasIndex("OutputProfessionId");

                    b.ToTable("ProfessionProfession");
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.ManyToMany.ProfessionSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AllowAllValues")
                        .HasColumnType("bit");

                    b.Property<int>("ProfessionSkillsId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionSkillsId");

                    b.HasIndex("SkillId");

                    b.ToTable("ProfessionSkill");
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.ManyToMany.ProfessionSkills", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProfessionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionId");

                    b.ToTable("ProfessionSkills");
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.Profession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInformations")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBasicLevel")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("ProfessionRaceAllowed")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.ProfessionStatistic", b =>
                {
                    b.Property<int>("ProfessionId")
                        .HasColumnType("int");

                    b.Property<short>("StatisticId")
                        .HasColumnType("smallint");

                    b.Property<byte>("Value")
                        .HasColumnType("tinyint");

                    b.HasKey("ProfessionId", "StatisticId");

                    b.HasIndex("StatisticId");

                    b.ToTable("ProfessionStatistic");
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DictionaryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBasicLevel")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("Trait")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("DictionaryId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.Statistic", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsBasicValue")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCalculatedValue")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.Ability", b =>
                {
                    b.HasOne("WarhammerProfessionApp.Entities.Models.DictionaryDefinition", "Dictionary")
                        .WithMany("Abilities")
                        .HasForeignKey("DictionaryId");
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.AdditionalCharacterItem", b =>
                {
                    b.HasOne("WarhammerProfessionApp.Entities.Models.Character", "Character")
                        .WithMany("AdditionalItems")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.AdditionalCharacterValue", b =>
                {
                    b.HasOne("WarhammerProfessionApp.Entities.Models.Character", "Character")
                        .WithMany("AdditionalValues")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.Character", b =>
                {
                    b.HasOne("WarhammerProfessionApp.Entities.Models.Profession", "CurrentProfession")
                        .WithMany()
                        .HasForeignKey("CurrentProfessionId");

                    b.HasOne("WarhammerProfessionApp.Entities.Models.User", "User")
                        .WithMany("Characters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.CharacterAbility", b =>
                {
                    b.HasOne("WarhammerProfessionApp.Entities.Models.Ability", "Ability")
                        .WithMany("Characters")
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarhammerProfessionApp.Entities.Models.Character", "Character")
                        .WithMany("Abilities")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarhammerProfessionApp.Entities.Models.DictionaryValue", "DictionaryValue")
                        .WithMany("CharacterAbilities")
                        .HasForeignKey("DictionaryValueId");

                    b.HasOne("WarhammerProfessionApp.Entities.Models.ManyToMany.ProfessionAbilities", "ProfessionAbilities")
                        .WithMany()
                        .HasForeignKey("ProfessionAbilitiesId");
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.CharacterItem", b =>
                {
                    b.HasOne("WarhammerProfessionApp.Entities.Models.Character", "Character")
                        .WithMany("Items")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarhammerProfessionApp.Entities.Models.Item", "Item")
                        .WithMany("Characters")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.CharacterProfession", b =>
                {
                    b.HasOne("WarhammerProfessionApp.Entities.Models.Character", "Character")
                        .WithMany("Professions")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarhammerProfessionApp.Entities.Models.Profession", "Profession")
                        .WithMany("Characters")
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.CharacterSkill", b =>
                {
                    b.HasOne("WarhammerProfessionApp.Entities.Models.Character", "Character")
                        .WithMany("Skills")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarhammerProfessionApp.Entities.Models.DictionaryValue", "DictionaryValue")
                        .WithMany("CharacterSkills")
                        .HasForeignKey("DictionaryValueId");

                    b.HasOne("WarhammerProfessionApp.Entities.Models.ManyToMany.ProfessionSkills", "ProfessionSkills")
                        .WithMany("Characters")
                        .HasForeignKey("ProfessionSkillsId");

                    b.HasOne("WarhammerProfessionApp.Entities.Models.Skill", "Skill")
                        .WithMany("Characters")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.CharacterStatistic", b =>
                {
                    b.HasOne("WarhammerProfessionApp.Entities.Models.Character", "Character")
                        .WithMany("Statistics")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarhammerProfessionApp.Entities.Models.Statistic", "Statistic")
                        .WithMany("Characters")
                        .HasForeignKey("StatisticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.DictionaryValue", b =>
                {
                    b.HasOne("WarhammerProfessionApp.Entities.Models.DictionaryDefinition", "Definition")
                        .WithMany("Values")
                        .HasForeignKey("DefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.DictionaryValueProfessionAbility", b =>
                {
                    b.HasOne("WarhammerProfessionApp.Entities.Models.DictionaryValue", "DictionaryValue")
                        .WithMany("Abilities")
                        .HasForeignKey("DictionaryValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarhammerProfessionApp.Entities.Models.ManyToMany.ProfessionAbility", "ProfessionAbility")
                        .WithMany("AllowedValues")
                        .HasForeignKey("ProfessionAbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.DictionaryValueProfessionSkill", b =>
                {
                    b.HasOne("WarhammerProfessionApp.Entities.Models.DictionaryValue", "DictionaryValue")
                        .WithMany("Skills")
                        .HasForeignKey("DictionaryValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarhammerProfessionApp.Entities.Models.ManyToMany.ProfessionSkill", "ProfessionSkill")
                        .WithMany("AllowedValues")
                        .HasForeignKey("ProfessionSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.ManyToMany.ProfessionAbilities", b =>
                {
                    b.HasOne("WarhammerProfessionApp.Entities.Models.Profession", "Profession")
                        .WithMany("Abilities")
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.ManyToMany.ProfessionAbility", b =>
                {
                    b.HasOne("WarhammerProfessionApp.Entities.Models.Ability", "Ability")
                        .WithMany("Professions")
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarhammerProfessionApp.Entities.Models.ManyToMany.ProfessionAbilities", "ProfessionAbilities")
                        .WithMany("Abilities")
                        .HasForeignKey("ProfessionAbilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarhammerProfessionApp.Entities.Models.ManyToMany.ProfessionAbilities", null)
                        .WithMany("Characters")
                        .HasForeignKey("ProfessionAbilitiesId1");
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.ManyToMany.ProfessionItem", b =>
                {
                    b.HasOne("WarhammerProfessionApp.Entities.Models.Item", "Item")
                        .WithMany("Professions")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarhammerProfessionApp.Entities.Models.ManyToMany.ProfessionItems", "ProfessionItems")
                        .WithMany("Items")
                        .HasForeignKey("ProfessionsItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.ManyToMany.ProfessionItems", b =>
                {
                    b.HasOne("WarhammerProfessionApp.Entities.Models.Profession", "Profession")
                        .WithMany("Equipment")
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.ManyToMany.ProfessionProfession", b =>
                {
                    b.HasOne("WarhammerProfessionApp.Entities.Models.Profession", "EntranceProfession")
                        .WithMany("OutputProfessions")
                        .HasForeignKey("EntranceProfessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarhammerProfessionApp.Entities.Models.Profession", "OutputProfession")
                        .WithMany("EntranceProfessions")
                        .HasForeignKey("OutputProfessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.ManyToMany.ProfessionSkill", b =>
                {
                    b.HasOne("WarhammerProfessionApp.Entities.Models.ManyToMany.ProfessionSkills", "ProfessionSkills")
                        .WithMany("Skills")
                        .HasForeignKey("ProfessionSkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarhammerProfessionApp.Entities.Models.Skill", "Skill")
                        .WithMany("Professions")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.ManyToMany.ProfessionSkills", b =>
                {
                    b.HasOne("WarhammerProfessionApp.Entities.Models.Profession", "Profession")
                        .WithMany("Skills")
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.Profession", b =>
                {
                    b.HasOne("WarhammerProfessionApp.Entities.Models.Image", "Image")
                        .WithMany("Professions")
                        .HasForeignKey("ImageId");
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.ProfessionStatistic", b =>
                {
                    b.HasOne("WarhammerProfessionApp.Entities.Models.Profession", "Profession")
                        .WithMany("Statistics")
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarhammerProfessionApp.Entities.Models.Statistic", "Statistic")
                        .WithMany("Professions")
                        .HasForeignKey("StatisticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarhammerProfessionApp.Entities.Models.Skill", b =>
                {
                    b.HasOne("WarhammerProfessionApp.Entities.Models.DictionaryDefinition", "Dictionary")
                        .WithMany("Skills")
                        .HasForeignKey("DictionaryId");
                });
#pragma warning restore 612, 618
        }
    }
}
